<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Sample RDBMS data source that would exist in any application - not Shiro related. -->
    <!-- 访问数据源 -->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
        <property name="url" value="jdbc:hsqldb:mem:shiro-spring"/>
        <property name="username" value="sa"/>
    </bean>-->
    <!-- Populates the sample database with sample users and roles. -->
    <!--<bean id="bootstrapDataPopulator" class="org.apache.shiro.samples.spring.BootstrapDataPopulator">
        <property name="dataSource" ref="dataSource"/>
    </bean>-->

    <!-- Simulated business-tier "Manager", not Shiro related, just an example -->
    <!-- sampleManager，例子里的，不需要 -->
    <!--<bean id="sampleManager" class="org.apache.shiro.samples.spring.DefaultSampleManager"/>-->

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <!-- shiro的核心组件-->
    <!-- 1. 配置SecurityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <!-- session的管理方式 -->
        <!--<property name="sessionMode" value="native"/>-->
        <property name="realm" ref="jdbcRealm"/>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!-- 2. 配置CacheManager -->
    <!-- 2.1 需要加入ehcache的jar包跟配置文件 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             # 指向一个cacheManager
            <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:
             # 直接指定一个ehcache配置文件
         -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!-- 3. 配置realm -->
    <!-- 3.1 直接实现了org.apache.shiro.realm.Realm接口的bean -->
    <bean id="jdbcRealm" class="com.licc.shiro.realms.ShiroRealm"></bean>
    <!--<bean id="jdbcRealm" class="org.apache.shiro.samples.spring.realm.SaltAwareJdbcRealm">
        <property name="name" value="jdbcRealm"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="credentialsMatcher">
            &lt;!&ndash; The 'bootstrapDataPopulator' Sha256 hashes the password
                 (using the username as the salt) then base64 encodes it: &ndash;&gt;
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA-256"/>
                &lt;!&ndash; true means hex encoded, false means base64 encoded &ndash;&gt;
                <property name="storedCredentialsHexEncoded" value="false"/>
            </bean>
        </property>
    </bean>-->

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!-- 4. 配置LifecycleBeanPostProcessor（生命周期bean post处理器），可以自动的来调用配置在Spring IOC容器中shiro bean的生命周期方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!-- 5. 启用IOC容器中只用shiro注解，但必须在配置了lifecycleBeanPostProcessor以后才可以使用 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks. -->
    <!-- 远程调用 -->
    <!--<bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>-->

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!-- 6. 配置shiroFilter(重要) -->
    <!-- 6.1 id必须和web.xml文件中配置的<filter-name>一致
         6.2 登录页面login.jsp
     -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <!-- 若与web.xml中的<filter-name>不一致,则会抛出NoSuchBeanDefinitionException异常
         (org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'shiroFilter' is defined)
         原因:Shiro会到IOC容器中查找和<filter-name>名字对应的filter bean
     -->
    <!--<bean id="shiroFilter2" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
        <property name="securityManager" ref="securityManager"/>
        <!-- 登录页面 -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 登录成功页面 -->
        <property name="successUrl" value="/list.jsp"/>
        <!-- 无权限的页面 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->
        <!-- 关键:配置哪些页面需要受保护，以及访问这些页面需要的权限 -->
        <!-- 1). anon:可以被匿名访问
             2). authc:必须认证(登录)后才能访问的页面
         -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 格式:url = 拦截器[参数]
                     anon(anonymous):匿名访问(即不需要登录即可访问)
                     authc(authentication):需要身份认证后才能访问
                 -->
                <!-- 顺序:url权限采取第一次匹配优先的方式,即从头开始使用第一个匹配的url模式对应的拦截器链
                     Ant风格
                     ?:匹配一个字符 /admin?  /admin1 √  /admin/ ×
                     *:匹配0个或多个字符串  /admin*  /admin √ /admin1 √  /admin/1 ×
                     **:匹配路径中的0个或多个路径  /admin/**  /admin/1 √ /admin/1/2 √
                 -->
                <!--/favicon.ico = anon
                /logo.png = anon
                /shiro.css = anon
                /s/login = anon
                /*.jar = anon-->
                # allow WebStart to pull the jars for the swing app:
                /login.jsp = anon
                <!--/user* = authc-->
                /list.jsp = anon
                # everything else requires authentication:
                <!-- 拦截所有url -->
                /** = authc
                <!--/list.jsp = anon-->
                <!--/user.jsp = authc-->
            </value>
        </property>
    </bean>

</beans>